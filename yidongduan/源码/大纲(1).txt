<!--
			order				定义元素的排列顺序。数值越小，排列越靠前，默认为0
		-->
		
























<!--
			flex-grow			当父级的宽度大于所有子元素宽度之和时，根据父级的剩余空间，设置子元素的扩展比例（设置后，元素给的固定宽度会被覆盖）它是一个系数
								默认为0，即如果存在剩余空间，也不扩展
				剩余空间
					剩余空间=父级的宽度-所有子元素的宽度和	
					
				子元素宽度计算公式
					子元素的宽度=（父级的宽度-所有子元素的宽度和）/所有子元素的flex-grow属性值之和*子元素的flex-grow属性值+子元素初始宽度
		-->
		















<!--
			flex-shrink			当所有子元素宽度之和大于父级宽度的时候，根据超出的空间，设置子元素的收缩比例（设置后，元素给的固定宽度会被覆盖）它是一个系数
								默认为1，如果给个0的话，就不会收缩
				超出空间
					超出空间=所有子元素的宽度和-父级的宽度
					
				子元素宽度计算公式
					1、算出超出空间，所有子元素的宽度和-父级的宽度
					2、子元素的初始宽度*子元素的flex-shrink值
					3、算出第二步所有结果的和
					4、每个子元素的第二步/第三步*第一步
					5、子元素的初始宽度-第四步
		-->
		













<!--
			flex-basis			设置子元素的宽度，与width的作用一样
								如果元素上同时设置了width和flex-basis,那么flex-basis会覆盖width的值
								注意：如果宽度不对的话，设置一下扩展比例与收缩比例为初始值
			总结：
				1、如果父级的空间足够flex-grow有效，flex-shrink无效
				2、如果父级的空间不够flex-shrink有效，flex-grow无效
				3、flex-basis与width是一样的
		-->
		












<!--
			flex			前面三个属性的缩写
							默认值为0 0 auto		（扩展比例 收缩比例 宽度）
								
		-->
		



















<!--
			align-self				子元素单独的垂直对齐方式，它能覆盖父级的align-items属性
				flex-start			顶对齐
				flex-end			底对齐
				center				中心对齐
		-->